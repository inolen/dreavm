#ifndef KEYCODE_H
#define KEYCODE_H

#include <stdint.h>

/* keyboard input callbacks are passed a key and a value which can represent
   either a digital button press, or an analog key / axis movement. the value
   is a signed 16-bit value, which for digital buttons is either the KEY_DOWN
   or KEY_UP constant, and for analog inputs is in the range of INT16_MIN to
   INT16_MAX */
#define KEY_DOWN INT16_MAX
#define KEY_UP INT16_MIN

enum keycode {
  K_UNKNOWN,
  K_SPACE = 32,
  K_LEFT_BRACKET = 91,
  K_BACKSLASH = 92,
  K_RIGHT_BRACKET = 93,
  K_GRAVE_ACCENT = 96,
  K_WORLD_1 = 161,
  K_WORLD_2 = 162,
  K_ESCAPE = 256,
  K_ENTER,
  K_TAB,
  K_BACKSPACE,
  K_INSERT,
  K_DELETE,
  K_RIGHT,
  K_LEFT,
  K_DOWN,
  K_UP,
  K_PAGE_UP,
  K_PAGE_DOWN,
  K_HOME,
  K_END,
  K_CAPS_LOCK = 280,
  K_SCROLL_LOCK,
  K_NUM_LOCK,
  K_PRINT_SCREEN,
  K_PAUSE,
  K_F1 = 290,
  K_F2,
  K_F3,
  K_F4,
  K_F5,
  K_F6,
  K_F7,
  K_F8,
  K_F9,
  K_F10,
  K_F11,
  K_F12,
  K_F13,
  K_F14,
  K_F15,
  K_F16,
  K_F17,
  K_F18,
  K_F19,
  K_F20,
  K_F21,
  K_F22,
  K_F23,
  K_F24,
  K_F25,
  K_KP_0,
  K_KP_1,
  K_KP_2,
  K_KP_3,
  K_KP_4,
  K_KP_5,
  K_KP_6,
  K_KP_7,
  K_KP_8,
  K_KP_9,
  K_KP_DECIMAL,
  K_KP_DIVIDE,
  K_KP_MULTIPLY,
  K_KP_SUBTRACT,
  K_KP_ADD,
  K_KP_ENTER,
  K_KP_EQUAL,
  K_LEFT_SHIFT,
  K_LEFT_CONTROL,
  K_LEFT_ALT,
  K_LEFT_SUPER,
  K_RIGHT_SHIFT,
  K_RIGHT_CONTROL,
  K_RIGHT_ALT,
  K_RIGHT_SUPER,
  K_MENU,

  K_MOUSE1,
  K_MOUSE2,
  K_MOUSE3,
  K_MOUSE4,
  K_MOUSE5,

  K_MWHEELUP,
  K_MWHEELDOWN,

  K_JOY0,
  K_JOY1,
  K_JOY2,
  K_JOY3,
  K_JOY4,
  K_JOY5,
  K_JOY6,
  K_JOY7,
  K_JOY8,
  K_JOY9,
  K_JOY10,
  K_JOY11,
  K_JOY12,
  K_JOY13,
  K_JOY14,
  K_JOY15,
  K_JOY16,
  K_JOY17,
  K_JOY18,
  K_JOY19,
  K_JOY20,
  K_JOY21,
  K_JOY22,
  K_JOY23,
  K_JOY24,
  K_JOY25,
  K_JOY26,
  K_JOY27,
  K_JOY28,
  K_JOY29,
  K_JOY30,
  K_JOY31,

  K_HAT0,
  K_HAT1,
  K_HAT2,
  K_HAT3,
  K_HAT4,
  K_HAT5,
  K_HAT6,
  K_HAT7,
  K_HAT8,
  K_HAT9,
  K_HAT10,
  K_HAT11,
  K_HAT12,
  K_HAT13,
  K_HAT14,
  K_HAT15,

  K_AXIS0,
  K_AXIS1,
  K_AXIS2,
  K_AXIS3,
  K_AXIS4,
  K_AXIS5,
  K_AXIS6,
  K_AXIS7,
  K_AXIS8,
  K_AXIS9,
  K_AXIS10,
  K_AXIS11,
  K_AXIS12,
  K_AXIS13,
  K_AXIS14,
  K_AXIS15,
  K_AXIS16,
  K_AXIS17,
  K_AXIS18,
  K_AXIS19,
  K_AXIS20,
  K_AXIS21,
  K_AXIS22,
  K_AXIS23,
  K_AXIS24,
  K_AXIS25,

  K_NUM_KEYS
};

#define NUM_JOYSTICK_BTNS ((K_JOY31 - K_JOY0) + 1)
#define NUM_JOYSTICK_HATS (((K_HAT15 - K_HAT0) + 1) / 4) /* 4 keys per hat */
#define NUM_JOYSTICK_AXES ((K_AXIS25 - K_AXIS0) + 1)

enum keycode get_key_by_name(const char *keyname);
const char *get_name_by_key(enum keycode keycode);

#endif
